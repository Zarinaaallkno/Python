import numpy as np

def determinant(matrix):
    """Calculate the determinant of a matrix."""
    return round(np.linalg.det(matrix))

def cramer(A, b):
    """Solve a system of linear equations Ax = b using Cramer's Rule.

    Args:
        A: Coefficient matrix (2D list or NumPy array).
        b: Constant vector (1D list or NumPy array).

    Returns:
        Solution vector x (numpy array) or None if no unique solution exists.
    """
    n = len(b)
    det_A = determinant(A)
    
    if det_A == 0:
        return None  # No unique solution

    x = np.zeros(n)
    
    for i in range(n):
        # Create a copy of A for the modified matrix
        Ai = np.copy(A)
        # Replace the i-th column with the vector b
        Ai[:, i] = b
        x[i] = determinant(Ai) / det_A
    
    return x

if __name__ == "__main__":
    # Example system of equations:
    # x + 2y + 3z = 9
    # 2x + 3y + z = 8
    # 3x + y + 2z = 7
    
    A = np.array([[1, 2, 3],
                  [2, 3, 1],
                  [3, 1, 2]], dtype=float)
    
    b = np.array([9, 8, 7], dtype=float)

    solution = cramer(A, b)

    if solution is not None:
        print("Solution:")
        for i, val in enumerate(solution):
            print(f"x{i + 1} = {val:.2f}")
    else:
        print("No unique solution exists.")
