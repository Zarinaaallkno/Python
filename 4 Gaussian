import numpy as np

def gaussian_elimination(A, b):
    """Solves a system of linear equations Ax = b using Gaussian elimination.

    Args:
        A: The coefficient matrix as a NumPy array.
        b: The constant vector as a NumPy array.

    Returns:
        The solution vector x as a NumPy array, or None if no unique solution exists.
    """
    n = len(b)
    Ab = np.concatenate((A, b.reshape(n, 1)), axis=1)  # Augmented matrix

    # Forward elimination
    for i in range(n):
        # Partial pivoting (optional but good for numerical stability)
        pivot_row = i + np.argmax(np.abs(Ab[i:, i]))
        if pivot_row != i:
            Ab[[i, pivot_row]] = Ab[[pivot_row, i]]  # Swap rows

        if Ab[i, i] == 0:
            return None  # No unique solution (singular matrix)

        for j in range(i + 1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, i:] -= factor * Ab[i, i:]

    # Back substitution
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = Ab[i, n]
        for j in range(i + 1, n):
            x[i] -= Ab[i, j] * x[j]
        x[i] /= Ab[i, i]

    return x


if __name__ == "__main__":
    # Example system of equations:
    # 2x + y - z = 8
    # -3x - y + 2z = -11
    # -2x + y + 2z = -3

    A = np.array([[2, 1, -1],
                  [-3, -1, 2],
                  [-2, 1, 2]], dtype=float)

    b = np.array([8, -11, -3], dtype=float)

    x = gaussian_elimination(A, b)

    if x is not None:
        print("Solution:")
        for i, val in enumerate(x):
            print(f"x{i+1} = {val:.2f}")
    else:
        print("No unique solution exists.")
